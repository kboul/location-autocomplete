{"version":3,"sources":["assets/xe-logo.jpg","sass/ClickToSearchBtn.module.sass","components/Banner.js","components/Logo.js","components/ClickToSearchBtn.js","utils/googleSearch.js","utils/browserLanguage.js","services/httpService.js","services/locationService.js","components/Autocomplete.js","components/Container.js","components/App.js","serviceWorker.js","index.js","sass/Banner.module.sass","sass/Container.module.sass"],"names":["module","exports","__webpack_require__","p","buttonParentDiv","Banner","react_default","a","createElement","className","bannerContainer","bannerText","Logo","width","height","src","logo","alt","ClickToSearchBtn","_ref","selectedLocation","isButtonDisabled","disabled","onClick","term","window","open","concat","browserLanguage","navigator","language","substring","axios","defaults","baseURL","process","httpService","get","getLocation","location","http","Autocomplete","state","isLoading","locations","handleSearch","_callee","query","_ref2","regenerator_default","wrap","_context","prev","next","_this","setState","sent","data","entries","length","stop","handleChange","selectedOptions","name","handleInputChange","input","e","_this$state","this","react","aria-hidden","lib","highlightOnlyResult","id","labelKey","minLength","onSearch","debounce","placeholder","options","onInputChange","onChange","renderMenuItemChildren","option","components_ClickToSearchBtn","Component","Container","bannerParentDiv","components_Banner","logoParentDiv","components_Logo","components_Autocomplete","App","components_Container","Boolean","hostname","match","ReactDOM","render","components_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.59a86b0e.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/xe-logo.d9001fbe.jpg\";","// extracted by mini-css-extract-plugin\nmodule.exports = {\"buttonParentDiv\":\"ClickToSearchBtn_buttonParentDiv__3RZz9\"};","import React from 'react'\nimport { bannerContainer, bannerText }\n    from '../sass/Banner.module.sass'\n\nconst Banner = () => {\n    return (\n        <div className={bannerContainer}>\n            <span className={bannerText}>\n                Banner space\n            </span>\n        </div>\n    )\n}\n\nexport default Banner","import React from 'react'\nimport logo from '../assets/xe-logo.jpg'\n\nconst Logo = () => {\n    return (\n        <img\n            width=\"100\"\n            height=\"100\"\n            src={logo}\n            alt=\"xe-logo\" />\n    )\n}\n\nexport default Logo","import React from 'react'\nimport PropTypes from 'prop-types'\nimport { googleSearch } from '../utils/googleSearch'\nimport { buttonParentDiv } from '../sass/ClickToSearchBtn.module.sass'\n\nconst ClickToSearchBtn = ({ selectedLocation, isButtonDisabled }) => {\n    return (\n        <div className={buttonParentDiv}>\n            <button\n                className=\"btn btn-primary\"\n                disabled={isButtonDisabled}\n                onClick={() => googleSearch(selectedLocation)}>\n                Click to search\n            </button>\n        </div>\n    )\n}\n\nClickToSearchBtn.propTypes = {\n    selectedLocation: PropTypes.string.isRequired,\n    isButtonDisabled: PropTypes.bool.isRequired\n}\n\nexport default ClickToSearchBtn","export const googleSearch = term => {\n    return window.open(`https://www.google.com/search?q=${term}`, '_blank')\n}","export const browserLanguage = () => {\n    return window.navigator.language.substring(0, 2)\n}","import axios from 'axios'\n\naxios.defaults.baseURL = process.env.REACT_APP_API_URL\n\nexport default {\n    get: axios.get\n}","/**\n * \n * @param {*} location string\n * @param {*} language string\n */\n\nimport http from '../services/httpService'\nconst apiEndpoint = '/search'\n\nexport const getLocation = (location, language) => {\n    return http.get(`${apiEndpoint}?keywords=${location}&language=${language}`)\n}","import React, { Component, Fragment } from 'react'\nimport { AsyncTypeahead } from 'react-bootstrap-typeahead'\nimport debounce from 'lodash.debounce'\nimport ClickToSearchBtn from './ClickToSearchBtn'\nimport { browserLanguage } from '../utils/browserLanguage'\nimport { getLocation } from '../services/locationService'\n\nclass Autocomplete extends Component {\n    state = {\n        isLoading: false,\n        locations: [],\n        selectedLocation: '',\n        isButtonDisabled: true\n    }\n\n    handleSearch = async query => {\n        this.setState({ isLoading: true })\n\n        const { data: { entries: locations } }\n            = await getLocation(query, browserLanguage())\n\n        this.setState({\n            isLoading: false,\n            locations,\n            isButtonDisabled: (locations.length === 0) ? true : false\n        })\n    }\n\n    handleChange = selectedOptions => {\n        if (!selectedOptions || !selectedOptions[0]) {\n            this.setState({ isButtonDisabled: true })\n            return\n        }\n\n        const selectedLocation = selectedOptions[0].name\n        this.setState({ selectedLocation })\n    }\n\n    handleInputChange = (input, e) => {\n        if (input === '')\n            this.setState({ isButtonDisabled: true })\n    }\n\n    render() {\n        const { isLoading, locations, selectedLocation,\n            isButtonDisabled } = this.state\n\n        return (\n            <Fragment>\n                <div className=\"mb-2\">\n                    What place are you looking for?\n                </div>\n\n                <div className=\"input-group mb-3\">\n                    <div className=\"input-group-prepend\">\n                        <span className=\"input-group-text\">\n                            <i\n                                className=\"fa fa-search\"\n                                aria-hidden=\"true\">\n                            </i>\n                        </span>\n                    </div>\n                    <AsyncTypeahead\n                        highlightOnlyResult\n                        id=\"locationSearch\"\n                        labelKey=\"name\"\n                        isLoading={isLoading}\n                        minLength={2}\n                        onSearch={debounce(this.handleSearch, 1000)}\n                        placeholder=\"Type a location...\"\n                        options={locations}\n                        onInputChange={this.handleInputChange}\n                        onChange={this.handleChange}\n                        renderMenuItemChildren={option =>\n                            <span>{option.name}</span>\n                        }\n                    />\n                </div>\n\n                <ClickToSearchBtn\n                    isButtonDisabled={isButtonDisabled}\n                    selectedLocation={selectedLocation} />\n            </Fragment>\n        )\n    }\n}\n\nexport default Autocomplete","import React from 'react'\nimport Banner from './Banner'\nimport Logo from './Logo'\nimport Autocomplete from './Autocomplete'\nimport { bannerParentDiv, logoParentDiv }\n    from '../sass/Container.module.sass'\n\nconst Container = () => {\n    return (\n        <div className=\"container-fluid mt-3\">\n            <div className=\"row\">\n                <div className={`col-md-1 ${bannerParentDiv}`}>\n                    <Banner />\n                </div>\n                <div className={`col-md-1 ${logoParentDiv}`}>\n                    <Logo />\n                </div>\n                <div className=\"col-md-8\">\n                    <Autocomplete />\n                </div>\n            </div>\n        </div>\n    )\n}\n\nexport default Container","import React from 'react'\nimport Container from './Container'\n\nconst App = () => <Container />\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets see https://github.com/facebook/create-react-app/issues/2374\n            return\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config)\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    )\n                })\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config)\n            }\n        })\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing\n                if (installingWorker == null) {\n                    return\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            )\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration)\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.')\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration)\n                            }\n                        }\n                    }\n                }\n            }\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error)\n        })\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type')\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload()\n                    })\n                })\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config)\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            )\n        })\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister()\n        })\n    }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport 'bootstrap/dist/css/bootstrap.css'\nimport 'font-awesome/css/font-awesome.min.css'\nimport 'react-bootstrap-typeahead/css/Typeahead.css'\n\nimport App from './components/App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n    <App />,\n    document.getElementById('root')\n)\n\nserviceWorker.unregister()","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bannerContainer\":\"Banner_bannerContainer__1IhKq\",\"bannerText\":\"Banner_bannerText__e37HQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"bannerParentDiv\":\"Container_bannerParentDiv__P2y_h\",\"logoParentDiv\":\"Container_logoParentDiv__3_AMQ\"};"],"sourceRoot":""}